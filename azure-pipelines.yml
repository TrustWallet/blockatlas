trigger:
  branches:
    include:
      - master
  tags:
    include:
      - '*'

pr:
  branches:
    include:
      - master

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  GOVERSION: '1.13'

jobs:
  - job: environment
    steps:
      - task: GoTool@0
        inputs:
          version: '$(GOVERSION)'
        displayName: 'Go Tool'

      - task: Go@0
        inputs:
          command: 'get'
          arguments: '-v -t -d ./...'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
        displayName: 'Go Get'

  - job: go_vet
    dependsOn: environment
    condition: succeeded()
    steps:
      - script: make govet
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        displayName: 'Run go vet'

  - job: unit_tests
    dependsOn: environment
    condition: succeeded()
    steps:
      - script: make test
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        displayName: 'Run unit tests'

  - job: functional_tests
    dependsOn: environment
    condition: succeeded()
    steps:
      - script: |
          go get github.com/gavv/httpexpect
          make functional
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        displayName: "Run functional tests for new PR's"
        condition: ne(variables['build.sourceBranch'], 'refs/heads/master')
        continueOnError: true

      - script: |
          make functional
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        displayName: 'Run functional tests for new releases'
        condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
        continueOnError: false

  - job: integration_tests
    dependsOn: environment
    condition: succeeded()
    steps:
      - script: make integration
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        displayName: 'Run integration tests'

  - job: build
    dependsOn: environment
    condition: succeeded()
    steps:
      - script: make go-build
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        displayName: 'Build'
        condition: not(startsWith(variables['build.sourceBranch'], 'refs/tags/'))
